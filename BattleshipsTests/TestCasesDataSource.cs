using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BattleshipsTests
{
    internal class TestCasesDataSource
    {
        public static IEnumerable<TestCaseData> TestCasesForShipPlacing
        {
            get
            {
                yield return new TestCaseData(
                    1, 1, 1, 1, 5,
                    new int[,] { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });
                yield return new TestCaseData(
                    2, 10, 7, 10, 10,
                    new int[,] { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 2, 2, 2, 2 } }); 
                yield return new TestCaseData(
                     3, 1, 1, 4, 1,
                     new int[,] { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });
            }
        }

        public static IEnumerable<TestCaseData> TestCasesForShipPlacingAfterDeleting
        {
            get
            {
                yield return new TestCaseData(
                    1, 1, 1, 5, 1, 1, 1, 1, 1, 5,
                    new int[,] { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });
                yield return new TestCaseData(
                    2, 10, 5, 10, 8, 2, 10, 7, 10, 10,
                    new int[,] { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 2, 2, 2, 2 } });
                yield return new TestCaseData(
                     1, 1, 1, 5, 1, 3, 1, 1, 4, 1,
                     new int[,] { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });
            }
        }

        public static IEnumerable<TestCaseData> TestCasesForGetShotting
        {
            get
            {
                yield return new TestCaseData(1, 1, (false, false, false));
                yield return new TestCaseData(1, 10, (false, false, false));
                yield return new TestCaseData(10, 1, (false, false, false));
                yield return new TestCaseData(5, 5, (true, false, false));
                yield return new TestCaseData(5, 8, (true, false, false));
                yield return new TestCaseData(8, 2, (true, false, false));
                yield return new TestCaseData(1, 5, (true, true, false));
            }
        }
        
        public static IEnumerable<TestCaseData> TestCasesForGetShotGridChanging
        {
            get
            {
                yield return new TestCaseData(
                    1, 1, 1, 1, 1, 1, 
                    new char[,] { { '@', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ' }, 
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' } });
                yield return new TestCaseData(
                   4, 5, 5, 5, 6, 5,
                   new char[,] { { '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', '·', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', '@', '#', '#', '#', ' ', ' ' },
                                { ' ', '#', ' ', ' ', '·', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' } });
                yield return new TestCaseData(
                   6, 2, 7, 2, 8, 2,
                   new char[,] { { '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ' },
                                { ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' } });
                yield return new TestCaseData(
                   1, 9, 3, 3, 7, 8,
                   new char[,] { { '#', '#', '#', '#', '#', ' ', ' ', ' ', '·', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', '·', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', '·', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                                { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' } });

            }
        }
    }
}
